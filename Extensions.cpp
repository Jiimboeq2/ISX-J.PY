#include "ISXPyPCH.h"
#include "ISXPy.h"

BOOST_PYTHON_MODULE(pyisxeq2)
{
	using namespace boost::python;

	class_<LSOBJECT>("LSObject", no_init);

	class_<PyLSObject>("PyLSObject", init<LSOBJECT&>())
		.add_property("to_bool", &PyLSObject::get_bool_from_lso)
		.add_property("to_byte", &PyLSObject::get_byte_from_lso)
		.add_property("to_float", &PyLSObject::get_float_from_lso)
		.add_property("to_int", &PyLSObject::get_int_from_lso)
		.add_property("to_int64", &PyLSObject::get_int64_from_lso)
		.add_property("to_string", &PyLSObject::get_string_from_lso)
		.add_property("to_uint", &PyLSObject::get_uint_from_lso)
		.def("to_lso", &PyLSObject::get_lso, return_value_policy<reference_existing_object>())
	;

	class_<PyActor, bases<PyLSObject>>("actor")
		.add_property("aura", &PyActor::get_aura)
		.add_property("char_class", &PyActor::get_class)
		.def("check_collision", &PyActor::check_collision, PyActor::check_collision_overloads(args("to_x", "to_y", "to_z")))
		.add_property("collision_radius", &PyActor::get_collision_radius)
		.add_property("collision_scale", &PyActor::get_collision_scale)
		.def("con_color", &PyActor::get_con_color, PyActor::get_con_color_overloads(args("as_rgb")))
		.add_property("current_animation", &PyActor::get_current_animation)
		.add_property("distance", &PyActor::get_distance)
		.add_property("distance2d", &PyActor::get_distance2d)
		.add_property("effective_level", &PyActor::get_effective_level)
		.add_property("faction", &PyActor::get_faction)
		.add_property("faction_standing", &PyActor::get_faction_standing)
		.add_property("flying_using_mount", &PyActor::get_flying_using_mount)
		.add_property("gender", &PyActor::get_gender)
		.add_property("guild", &PyActor::get_guild)
		.add_property("heading", &PyActor::get_heading)
		.add_property("heading_to", &PyActor::get_heading_to)
		.add_property("heading_to_as_compass_bearing", &PyActor::get_heading_to_as_compass_bearing)
		.add_property("id", &PyActor::get_id)
		.add_property("in_my_group", &PyActor::get_in_my_group)
		.add_property("interactable", &PyActor::get_interactable)
		.add_property("health", &PyActor::get_health)
		.add_property("last_name", &PyActor::get_last_name)
		.add_property("level", &PyActor::get_level)
		.add_property("loc", &PyActor::get_loc)
		.add_property("mood", &PyActor::get_mood)
		.add_property("name", &PyActor::get_name)
		.add_property("on_flying_mount", &PyActor::get_on_flying_mount)
		.add_property("pet", &PyActor::get_pet)
		.add_property("power", &PyActor::get_power)
		.add_property("race", &PyActor::get_race)
		.add_property("speed", &PyActor::get_speed)
		.add_property("suffix_title", &PyActor::get_suffix_title)
		.add_property("swimming_speed_mod", &PyActor::get_swimming_speed_mod)
		.add_property("target", &PyActor::get_target)
		.add_property("target_ring_radius", &PyActor::get_target_ring_radius)
		.add_property("threat_to_me", &PyActor::get_threat_to_me)
		.add_property("threat_to_next", &PyActor::get_threat_to_next)
		.add_property("threat_to_pet", &PyActor::get_threat_to_pet)
		.add_property("tint_flags", &PyActor::get_tint_flags)
		.add_property("type", &PyActor::get_type)
		.add_property("velocity", &PyActor::get_velocity)
		.add_property("visual_variant", &PyActor::get_visual_variant)
		.add_property("who_following", &PyActor::get_who_following)
		.add_property("who_following_id", &PyActor::get_who_following_id)
		.add_property("x", &PyActor::get_x)
		.add_property("y", &PyActor::get_y)
		.add_property("z", &PyActor::get_z)
	;

	class_<PyEQ2, bases<PyLSObject>>("eq2")
		.add_property("server_name", &PyEQ2::get_server_name)
		.def("query_actors", &PyEQ2::query_actors, PyEQ2::query_actors_overloads(args("actor_list", "query")));

	class_<PyISXEQ2, bases<PyLSObject>>("isxeq2")
		.def("add_loc", &PyISXEQ2::add_loc, PyISXEQ2::add_loc_overloads(args("label", "notes")))
		.add_property("affliction_events_on", &PyISXEQ2::get_affliction_events_on)
		.add_property("api_version", &PyISXEQ2::get_api_version)
		.def("clear_abilities_cache", &PyISXEQ2::clear_abilities_cache)
		.def("disable_affliction_events", &PyISXEQ2::disable_affliction_events)
		.def("disable_custom_zoning_text", &PyISXEQ2::disable_custom_zoning_text)
		.def("enable_affliction_events", &PyISXEQ2::enable_affliction_events)
		.def("enable_custom_zoning_text", &PyISXEQ2::enable_custom_zoning_text)
		.def("eq2locs_count", &PyISXEQ2::get_eq2locs_count, PyISXEQ2::get_eq2locs_count_overloads(args("all_zones")))
		.add_property("is_ready", &PyISXEQ2::get_is_ready)
		.def("is_valid_eq2press_key", &PyISXEQ2::get_is_valid_eq2press_key, args("key"))
		.def("popup", &PyISXEQ2::popup, PyISXEQ2::popup_overloads(args("message", "title", "status")))
		.def("reset_internal_vending_system", &PyISXEQ2::reset_internal_vending_system)
		.def("set_actor_events_range", &PyISXEQ2::set_actor_events_range, args("range"))
		.def("set_actor_events_time_interval", &PyISXEQ2::set_actor_events_time_interval, args("time"))
		.def("set_affliction_events_time_interval", &PyISXEQ2::set_affliction_events_time_interval, args("time"))
		.add_property("version", &PyISXEQ2::get_version);

	class_<PyEffectInfo, bases<PyLSObject>>("effect_info")
		.add_property("description", &PyEffectInfo::get_description)
		.add_property("name", &PyEffectInfo::get_name)
		.add_property("type", &PyEffectInfo::get_type);

	class_<PyEffect, bases<PyLSObject>>("effect")
		.add_property("back_drop_icon_id", &PyEffect::get_back_drop_icon_id)
		.add_property("current_increments", &PyEffect::get_current_increments)
		.add_property("duration", &PyEffect::get_duration)
		.add_property("effect_info", &PyEffect::get_effect_info)
		.add_property("id", &PyEffect::get_id)
		.add_property("is_effect_info_available", &PyEffect::get_is_effect_info_available)
		.add_property("main_icon_id", &PyEffect::get_main_icon_id)
		.add_property("max_duration", &PyEffect::get_max_duration)
		.add_property("back_drop_icon_id", &PyEffect::get_back_drop_icon_id);

	class_<PyMaintained, bases<PyLSObject>>("maintained")
		.add_property("concentration_cost", &PyMaintained::get_concentration_cost)
		.add_property("current_increments", &PyMaintained::get_current_increments)
		.add_property("damage_remaining", &PyMaintained::get_damage_remaining)
		.add_property("duration", &PyMaintained::get_duration)
		.add_property("is_beneficial", &PyMaintained::get_is_beneficial)
		.add_property("max_duration", &PyMaintained::get_max_duration)
		.add_property("name", &PyMaintained::get_name)
		.add_property("target", &PyMaintained::get_target)
		.add_property("target_type", &PyMaintained::get_target_type)
		.add_property("uses_remaining", &PyMaintained::get_uses_remaining);

	

	class_<PyCharacter, bases<PyLSObject>>("character")
		.add_property("archetype", &PyCharacter::get_archetype)
		.add_property("at_char_select", &PyCharacter::get_at_char_select)
		.add_property("base_strength", &PyCharacter::get_base_strength)
		.add_property("breath", &PyCharacter::get_breath)
		.add_property("char_class", &PyCharacter::get_class)
		.add_property("copper", &PyCharacter::get_copper)
		.add_property("current_health", &PyCharacter::get_current_health)
		.add_property("current_power", &PyCharacter::get_current_power)
		.add_property("effective_level", &PyCharacter::get_effective_level)
		.add_property("exp_bubble", &PyCharacter::get_exp_bubble)
		.add_property("exp_current", &PyCharacter::get_exp_current)
		.add_property("exp_debt_current", &PyCharacter::get_exp_debt_current)
		.add_property("exp_next_level", &PyCharacter::get_exp_next_level)
		.add_property("exp_percent", &PyCharacter::get_exp_percent)
		.add_property("gender", &PyCharacter::get_gender)
		.add_property("gold", &PyCharacter::get_gold)
		.add_property("heading", &PyCharacter::get_heading)
		.add_property("health_regen", &PyCharacter::get_health_regen)
		.add_property("in_game_world", &PyCharacter::get_in_game_world)
		.add_property("is_moving", &PyCharacter::get_is_moving)
		.add_property("level", &PyCharacter::get_level)
		.add_property("max_conc", &PyCharacter::get_max_conc)
		.add_property("max_health", &PyCharacter::get_max_health)
		.add_property("max_power", &PyCharacter::get_max_power)
		.add_property("name", &PyCharacter::get_name)
		.add_property("platinum", &PyCharacter::get_platinum)
		.add_property("power_regen", &PyCharacter::get_power_regen)
		.add_property("race", &PyCharacter::get_race)
		.add_property("silver", &PyCharacter::get_silver)
		.add_property("strength", &PyCharacter::get_strength)
		.add_property("subclass", &PyCharacter::get_subclass)
		.add_property("ts_archetype", &PyCharacter::get_ts_archetype)
		.add_property("ts_class", &PyCharacter::get_ts_class)
		.add_property("ts_level", &PyCharacter::get_ts_level)
		.add_property("ts_subclass", &PyCharacter::get_ts_subclass)
		.add_property("ts_vitality", &PyCharacter::get_ts_vitality)
		.add_property("ts_vitality_lower_marker", &PyCharacter::get_ts_vitality_lower_marker)
		.add_property("ts_vitality_overflow_marker", &PyCharacter::get_ts_vitality_overflow_marker)
		.add_property("ts_vitality_upper_marker", &PyCharacter::get_ts_vitality_upper_marker)
		.add_property("used_conc", &PyCharacter::get_used_conc)
		.add_property("water_depth", &PyCharacter::get_water_depth)
		.add_property("vitality", &PyCharacter::get_vitality)
		.add_property("vitality_lower_marker", &PyCharacter::get_vitality_lower_marker)
		.add_property("vitality_overflow_marker", &PyCharacter::get_vitality_overflow_marker)
		.add_property("vitality_upper_marker", &PyCharacter::get_vitality_upper_marker)
		.add_property("x", &PyCharacter::get_x)
		.add_property("y", &PyCharacter::get_y)
		.add_property("z", &PyCharacter::get_z)
		.def("check_collision", &PyCharacter::check_collision)
		.def("query_effects", &PyCharacter::query_effects, PyCharacter::query_effects_overloads(args("effect_list", "query")))
		.def("get_maintained", &PyCharacter::get_maintained)
		.def("heading_to", &PyCharacter::heading_to)
		.def("heading_to_as_compass_bearing", &PyCharacter::heading_to_as_compass_bearing);

	class_<PyPoint3f, bases<PyLSObject>>("point3f")
		.add_property("x", &PyPoint3f::get_x)
		.add_property("y", &PyPoint3f::get_y)
		.add_property("z", &PyPoint3f::get_z)
		.def("xyz", &PyPoint3f::get_xyz, PyPoint3f::get_xyz_overloads(args("separator")));
}

void Initialize_Module_PyISXEQ2()
{
	PyImport_AppendInittab("pyisxeq2", PyInit_pyisxeq2);
}

void Shutdown_Module_PyISXEQ2()
{

}